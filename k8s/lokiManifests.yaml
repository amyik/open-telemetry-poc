---
# Source: loki/charts/grafana-agent-operator/templates/operator-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loki-grafana-agent-operator
  labels:
    app.kubernetes.io/name: grafana-agent-operator
    app.kubernetes.io/instance: loki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: operator
    helm.sh/chart: grafana-agent-operator-0.2.16
    app.kubernetes.io/version: "0.34.1"
---
# Source: loki/templates/loki-canary/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loki-canary
  namespace: default
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: canary
automountServiceAccountToken: true
---
# Source: loki/templates/monitoring/grafana-agent.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loki-grafana-agent
  namespace: default
---
# Source: loki/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loki
  namespace: default
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: loki/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki
  namespace: default
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    
    auth_enabled: false
    common:
      compactor_address: 'loki'
      path_prefix: /var/loki
      replication_factor: 1
      storage:
        filesystem:
          chunks_directory: /var/loki/chunks
          rules_directory: /var/loki/rules
    frontend:
      scheduler_address: ""
    frontend_worker:
      scheduler_address: ""
    index_gateway:
      mode: ring
    limits_config:
      enforce_metric_name: false
      max_cache_freshness_per_query: 10m
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      split_queries_by_interval: 15m
    memberlist:
      join_members:
        - loki-memberlist
    query_range:
      align_queries_with_step: true
    ruler:
      storage:
        type: local
    runtime_config:
      file: /etc/loki/runtime-config/runtime-config.yaml
    schema_config:
      configs:
        - from: "2022-01-11"
          index:
            period: 24h
            prefix: loki_index_
          object_store: filesystem
          schema: v12
          store: boltdb-shipper
    server:
      grpc_listen_port: 9095
      http_listen_port: 3100
#    storage_config:
#      hedging:
#        at: 250ms
#        max_per_second: 20
#        up_to: 3
---
# Source: loki/templates/gateway/configmap-gateway.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-gateway
  namespace: default
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gateway
data:
  nginx.conf: |
    worker_processes  5;  ## Default: 1
    error_log  /dev/stderr;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;
    
    events {
      worker_connections  4096;  ## Default: 1024
    }
    
    http {
      client_body_temp_path /tmp/client_temp;
      proxy_temp_path       /tmp/proxy_temp_path;
      fastcgi_temp_path     /tmp/fastcgi_temp;
      uwsgi_temp_path       /tmp/uwsgi_temp;
      scgi_temp_path        /tmp/scgi_temp;
    
      client_max_body_size  4M;
    
      proxy_read_timeout    600; ## 10 minutes
      proxy_send_timeout    600;
      proxy_connect_timeout 600;
    
      proxy_http_version    1.1;
    
      default_type application/octet-stream;
      log_format   main '$remote_addr - $remote_user [$time_local]  $status '
            '"$request" $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';
      access_log   /dev/stderr  main;
    
      sendfile     on;
      tcp_nopush   on;
      resolver kube-dns.kube-system.svc.cluster.local.;
    
    
      server {
        listen             8080;
        listen             [::]:8080;
    
        location = / {
          return 200 'OK';
          auth_basic off;
        }
    
    
        # Distributor
        location = /api/prom/push {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1/push {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location = /distributor/ring {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
    
        # Ingester
        location = /flush {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location ^~ /ingester/ {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location = /ingester {
          internal;        # to suppress 301
        }
    
        # Ring
        location = /ring {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
    
        # MemberListKV
        location = /memberlist {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
    
    
        # Ruler
        location = /ruler/ring {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location = /api/prom/rules {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location ^~ /api/prom/rules/ {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1/rules {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location ^~ /loki/api/v1/rules/ {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location = /prometheus/api/v1/alerts {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location = /prometheus/api/v1/rules {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
    
        # Compactor
        location = /compactor/ring {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1/delete {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1/cache/generation_numbers {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
    
        # IndexGateway
        location = /indexgateway/ring {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
    
        # QueryScheduler
        location = /scheduler/ring {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
    
        # Config
        location = /config {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
    
    
        # QueryFrontend, Querier
        location = /api/prom/tail {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
        location = /loki/api/v1/tail {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
        location ^~ /api/prom/ {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location = /api/prom {
          internal;        # to suppress 301
        }
        location ^~ /loki/api/v1/ {
          proxy_pass       http://loki.default.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1 {
          internal;        # to suppress 301
        }
      }
    }
---
# Source: loki/templates/runtime-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-runtime
  namespace: default
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
data:
  runtime-config.yaml: |
    {}
---
# Source: loki/charts/grafana-agent-operator/templates/operator-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: loki-grafana-agent-operator
  labels:
    app.kubernetes.io/name: grafana-agent-operator
    app.kubernetes.io/instance: loki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: operator
    helm.sh/chart: grafana-agent-operator-0.2.16
    app.kubernetes.io/version: "0.34.1"
rules:
  - apiGroups: [monitoring.grafana.com]
    resources:
      - grafanaagents
      - metricsinstances
      - logsinstances
      - podlogs
      - integrations
    verbs: [get, list, watch]
  - apiGroups: [monitoring.grafana.com]
    resources:
      - grafanaagents/finalizers
      - metricsinstances/finalizers
      - logsinstances/finalizers
      - podlogs/finalizers
      - integrations/finalizers
    verbs: [get, list, watch, update]
  - apiGroups: [monitoring.coreos.com]
    resources:
      - podmonitors
      - probes
      - servicemonitors
    verbs: [get, list, watch]
  - apiGroups: [monitoring.coreos.com]
    resources:
      - podmonitors/finalizers
      - probes/finalizers
      - servicemonitors/finalizers
    verbs: [get, list, watch, update]
  - apiGroups: [""]
    resources:
      - namespaces
      - nodes
    verbs: [get, list, watch]
  - apiGroups: [""]
    resources:
      - secrets
      - services
      - configmaps
      - endpoints
    verbs: [get, list, watch, create, update, patch, delete]
  - apiGroups: ["apps"]
    resources:
      - statefulsets
      - daemonsets
      - deployments
    verbs: [get, list, watch, create, update, patch, delete]
---
# Source: loki/templates/monitoring/grafana-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: loki-grafana-agent
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - events
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
      - /metrics/cadvisor
    verbs:
      - get
---
# Source: loki/charts/grafana-agent-operator/templates/operator-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: loki-grafana-agent-operator
  labels:
    app.kubernetes.io/name: grafana-agent-operator
    app.kubernetes.io/instance: loki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: operator
    helm.sh/chart: grafana-agent-operator-0.2.16
    app.kubernetes.io/version: "0.34.1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: loki-grafana-agent-operator
subjects:
  - kind: ServiceAccount
    name: loki-grafana-agent-operator
    namespace: default
---
# Source: loki/templates/monitoring/grafana-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: loki-grafana-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: loki-grafana-agent
subjects:
  - kind: ServiceAccount
    name: loki-grafana-agent
    namespace: default
---
# Source: loki/templates/gateway/service-gateway.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-gateway
  namespace: default
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gateway
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: gateway
---
# Source: loki/templates/loki-canary/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-canary
  namespace: default
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: canary
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3500
      targetPort: http-metrics
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: canary
---
# Source: loki/templates/service-memberlist.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-memberlist
  namespace: default
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp
      port: 7946
      targetPort: http-memberlist
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/part-of: memberlist
---
# Source: loki/templates/single-binary/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-headless
  namespace: default
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
    variant: headless
    prometheus.io/service-monitor: "false"
  annotations:
spec:
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
---
# Source: loki/templates/single-binary/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: default
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/component: single-binary
---
# Source: loki/templates/loki-canary/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: loki-canary
  namespace: default
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: canary
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: loki
      app.kubernetes.io/component: canary
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: loki
        app.kubernetes.io/component: canary
    spec:
      serviceAccountName: loki-canary
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      containers:
        - name: loki-canary
          image: docker.io/grafana/loki-canary:2.9.0
          imagePullPolicy: IfNotPresent
          args:
            - -addr=loki-gateway.default.svc.cluster.local.:80
            - -labelname=pod
            - -labelvalue=$(POD_NAME)
            - -user=self-monitoring
            - -tenant-id=self-monitoring
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          ports:
            - name: http-metrics
              containerPort: 3500
              protocol: TCP
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

          readinessProbe:
            httpGet:
              path: /metrics
              port: http-metrics
            initialDelaySeconds: 15
            timeoutSeconds: 1
---
# Source: loki/charts/grafana-agent-operator/templates/operator-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-grafana-agent-operator
  labels:
    app.kubernetes.io/name: grafana-agent-operator
    app.kubernetes.io/instance: loki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: operator
    helm.sh/chart: grafana-agent-operator-0.2.16
    app.kubernetes.io/version: "0.34.1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent-operator
      app.kubernetes.io/instance: loki
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana-agent-operator
        app.kubernetes.io/instance: loki
    spec:
      serviceAccountName: loki-grafana-agent-operator
      containers:
        - name: grafana-agent-operator
          image: "docker.io/grafana/agent-operator:v0.34.1"
          imagePullPolicy: IfNotPresent
          args:
            - --kubelet-service=default/kubelet
---
# Source: loki/templates/gateway/deployment-gateway.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-gateway
  namespace: default
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gateway
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: loki
      app.kubernetes.io/component: gateway
  template:
    metadata:
      annotations:
        checksum/config: 06ebbaf081ebd466dfdc80b4b0e1b09361e564b4a7fe4d46efcbce340795e312
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: loki
        app.kubernetes.io/component: gateway
    spec:
      serviceAccountName: loki
      enableServiceLinks: true
      
      securityContext:
        fsGroup: 101
        runAsGroup: 101
        runAsNonRoot: true
        runAsUser: 101
      terminationGracePeriodSeconds: 0
      containers:
        - name: nginx
          image: docker.io/nginxinc/nginx-unprivileged:1.23-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 15
            timeoutSeconds: 1
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: config
              mountPath: /etc/nginx
            - name: tmp
              mountPath: /tmp
            - name: docker-entrypoint-d-override
              mountPath: /docker-entrypoint.d
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: loki
                  app.kubernetes.io/instance: loki
                  app.kubernetes.io/component: gateway
              topologyKey: kubernetes.io/hostname

      volumes:
        - name: config
          configMap:
            name: loki-gateway
        - name: tmp
          emptyDir: {}
        - name: docker-entrypoint-d-override
          emptyDir: {}
---
# Source: loki/templates/single-binary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki
  namespace: default
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: single-binary
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: loki-headless
  revisionHistoryLimit: 10
  
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
    whenScaled: Delete
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: loki
      app.kubernetes.io/component: single-binary
  template:
    metadata:
      annotations:
        checksum/config: 44c045ad0a0da07ffa7e8ceed2e7cbb0ab518a485e1101a5177c5865d7be37a2
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: loki
        app.kubernetes.io/component: single-binary
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: loki
      automountServiceAccountToken: true
      enableServiceLinks: true
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 0
      containers:
        - name: loki
          image: docker.io/grafana/loki:2.9.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=all
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: storage-tmp # <-- 테스트용도로 수정함, 휘발성
              mountPath: /var/loki
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: loki
                  app.kubernetes.io/instance: loki
                  app.kubernetes.io/component: single-binary
              topologyKey: kubernetes.io/hostname

      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: loki
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: loki-runtime
        - name: storage-tmp
          emptyDir:
            sizeLimit: 5Gi
#  volumeClaimTemplates:
#    - metadata:
#        name: storage
#      spec:
#        accessModes:
#          - ReadWriteOnce
#        resources:
#          requests:
#            storage: "10Gi"
---
# Source: loki/templates/monitoring/grafana-agent.yaml
apiVersion: monitoring.grafana.com/v1alpha1
kind: GrafanaAgent
metadata:
  name: loki
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  serviceAccountName: loki-grafana-agent
  enableConfigReadAPI: false
  
  logs:
    instanceSelector:
      matchLabels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: loki
---
# Source: loki/templates/monitoring/logs-instance.yaml
apiVersion: monitoring.grafana.com/v1alpha1
kind: LogsInstance
metadata:
  name: loki
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  clients:
    - url: http://loki.default.svc.cluster.local:3100/loki/api/v1/push
      externalLabels:
        cluster: loki
      tenantId: "self-monitoring"

  podLogsNamespaceSelector: {}

  podLogsSelector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: loki
---
# Source: loki/templates/monitoring/pod-logs.yaml
apiVersion: monitoring.grafana.com/v1alpha1
kind: PodLogs
metadata:
  name: loki
  labels:
    helm.sh/chart: loki-5.18.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: loki
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  pipelineStages:
    - cri: { }
  relabelings:
    - sourceLabels:
        - __meta_kubernetes_pod_node_name
      targetLabel: __host__
    - action: labelmap
      regex: __meta_kubernetes_pod_label_(.+)
    - action: replace
      replacement: "$1"
      separator: "-"
      sourceLabels:
        - __meta_kubernetes_pod_label_app_kubernetes_io_name
        - __meta_kubernetes_pod_label_app_kubernetes_io_component
      targetLabel: __service__
    - action: replace
      replacement: "$1"
      separator: "/"
      sourceLabels:
        - __meta_kubernetes_namespace
        - __service__
      targetLabel: job
    - action: replace
      sourceLabels:
        - __meta_kubernetes_pod_container_name
      targetLabel: container
    - replacement: "loki"
      targetLabel: cluster
  namespaceSelector:
    matchNames:
      - default
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: loki
---
# Source: loki/charts/grafana-agent-operator/templates/tests/test-grafanaagent.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-agent-test-sa
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
---
# Source: loki/charts/grafana-agent-operator/templates/tests/test-grafanaagent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-agent-test-cr
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
      - /metrics/cadvisor
    verbs:
      - get
---
# Source: loki/charts/grafana-agent-operator/templates/tests/test-grafanaagent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana-agent-test-crb
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana-agent-test-cr
subjects:
  - kind: ServiceAccount
    name: grafana-agent-test-sa
    namespace: default
---
# Source: loki/charts/grafana-agent-operator/templates/tests/test-grafanaagent.yaml
#apiVersion: v1
#kind: Pod
#metadata:
#  name: grafana-agent-test-probe
#  annotations:
#    "helm.sh/hook": test
#    "helm.sh/hook-weight": "1"
#    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
#spec:
#  containers:
#    - name: busybox
#      image: busybox
#      command: ['wget']
#      args:  ['grafana-agent-test-operated:8080/-/healthy']
#  # Wait for GrafanaAgent CR
#  initContainers:
#    - name: sleep
#      image: busybox
#      command: ['sleep', '60']
#  restartPolicy: Never
---
# Source: loki/templates/tests/test-canary.yaml
#apiVersion: v1
#kind: Pod
#metadata:
#  name: "loki-helm-test"
#  namespace: default
#  labels:
#    helm.sh/chart: loki-5.18.1
#    app.kubernetes.io/name: loki
#    app.kubernetes.io/instance: loki
#    app.kubernetes.io/version: "2.9.0"
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/component: helm-test
#  annotations:
#    "helm.sh/hook": test
#spec:
#  containers:
#    - name: loki-helm-test
#      image: docker.io/grafana/loki-helm-test:latest
#      env:
#        - name: CANARY_PROMETHEUS_ADDRESS
#          value: "http://prometheus:9090"
#        - name: CANARY_TEST_TIMEOUT
#          value: "1m"
#      args:
#        - -test.v
#  restartPolicy: Never
---
# Source: loki/charts/grafana-agent-operator/templates/tests/test-grafanaagent.yaml
#apiVersion: monitoring.grafana.com/v1alpha1
#kind: GrafanaAgent
#metadata:
#  name: grafana-agent-test
#  labels:
#    app: grafana-agent-test
#  annotations:
#    "helm.sh/hook": test
#    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
#spec:
#  image: "docker.io/grafana/agent:v0.34.1"
#  logLevel: info
#  serviceAccountName: grafana-agent-test-sa
#  metrics:
#    instanceSelector:
#      matchLabels:
#        agent: grafana-agent-test
---
# Source: loki/charts/grafana-agent-operator/templates/tests/test-grafanaagent.yaml
apiVersion: monitoring.grafana.com/v1alpha1
kind: MetricsInstance
metadata:
  name: primary-test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
  labels:
    agent: grafana-agent-test
spec: {}